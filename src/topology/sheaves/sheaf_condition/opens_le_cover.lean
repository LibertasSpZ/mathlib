/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import topology.sheaves.presheaf
import category_theory.full_subcategory
import category_theory.limits.cofinal
import topology.sheaves.sheaf_condition.pairwise_intersections

/-!
# Another version of the sheaf condition.

Given a family of open sets `U : Œπ ‚Üí opens X` we can form the subcategory
`{ V : opens X // ‚àÉ i, V ‚â§ U i }`, which has `supr U` as a cocone.

The sheaf condition on a presheaf `F` is equivalent to
`F` sending the opposite of this cocone to a limit cone in `C`, for every `U`.

## References
* This is the definition Lurie uses in "Spectral Algebraic Geometry".
-/

universes v u

noncomputable theory

open category_theory
open category_theory.limits
open topological_space
open opposite
open topological_space.opens

namespace Top

variables {C : Type u} [category.{v} C] [has_limits C]
variables {X : Top.{v}} (F : presheaf C X) {Œπ : Type v} (U : Œπ ‚Üí opens X)

namespace presheaf

namespace sheaf_condition

/--
The category of open sets contained in some element of the cover.
-/
def opens_le_cover : Type v := { V : opens X // ‚àÉ i, V ‚â§ U i }

instance : category (opens_le_cover U) := category_theory.full_subcategory _

namespace opens_le_cover

variables {U}

def index (V : opens_le_cover U) : Œπ := V.property.some

def hom_to_index (V : opens_le_cover U) : V.val ‚ü∂ U (index V) :=
hom_of_le (V.property.some_spec)

end opens_le_cover

/--
`supr U` as a cocone over the opens sets contained in some element of the cover.

(In fact this is a colimit cocone.)
-/
def opens_le_cover_cone : cocone (full_subcategory_inclusion _ : opens_le_cover U ‚•§ opens X) :=
{ X := supr U,
  Œπ := { app := Œª V : opens_le_cover U, V.hom_to_index ‚â´ opens.le_supr U _, } }

end sheaf_condition

open sheaf_condition

@[derive subsingleton]
def sheaf_condition_opens_le_cover : Type (max u (v+1)) :=
Œ† ‚¶ÉŒπ : Type v‚¶Ñ (U : Œπ ‚Üí opens X), is_limit (F.map_cone (opens_le_cover_cone U).op)

-- It seems that proving this is equivalent to the usual sheaf condition should use cofinality.

namespace sheaf_condition

open category_theory.pairwise

def pairwise_to_opens_le_cover_obj : pairwise Œπ ‚Üí opens_le_cover U
| (single i) := ‚ü®U i, ‚ü®i, le_refl _‚ü©‚ü©
| (pair i j) := ‚ü®U i ‚äì U j, ‚ü®i, inf_le_left‚ü©‚ü©

open category_theory.pairwise.hom

def pairwise_to_opens_le_cover_map :
  Œ† {V W : pairwise Œπ}, (V ‚ü∂ W) ‚Üí (pairwise_to_opens_le_cover_obj U V ‚ü∂ pairwise_to_opens_le_cover_obj U W)
| _ _ (id_single i) := ùüô _
| _ _ (id_pair i j) := ùüô _
| _ _ (left i j) := sorry
| _ _ (right i j) := sorry

def pairwise_to_opens_le_cover : pairwise Œπ ‚•§ opens_le_cover U :=
{ obj := pairwise_to_opens_le_cover_obj U,
  map := Œª V W i, pairwise_to_opens_le_cover_map U i, }

instance (V : opens_le_cover U) :
  nonempty (comma (functor.from_punit V) (pairwise_to_opens_le_cover U)) :=
‚ü®{ right := single (V.index), hom := V.hom_to_index }‚ü©

instance : cofinal (pairwise_to_opens_le_cover U) :=
Œª V, is_connected_of_single_zigzag (Œª A B, ‚ü®
  begin
    rcases A with ‚ü®‚ü®‚ü©, ‚ü®i‚ü©|‚ü®i,j‚ü©, a‚ü©;
    rcases B with ‚ü®‚ü®‚ü©, ‚ü®i'‚ü©|‚ü®i',j'‚ü©, b‚ü©;
    dsimp at *,
    sorry, sorry, sorry,
  end
  ‚ü©)

end sheaf_condition

end presheaf

end Top
