import category_theory.limits.limits
import category_theory.punit
import category_theory.comma
import category_theory.is_connected

noncomputable theory

universes v u

namespace category_theory
open category_theory.limits

variables {C : Type v} [small_category C]
variables {D : Type v} [small_category D]

def final (F : C ‚•§ D) : Prop :=
‚àÄ (d : D), is_connected (comma (functor.from_punit d) F)

attribute [class] final

instance (F : C ‚•§ D) [‚Ñ± : final F] (d : D) : is_connected (comma (functor.from_punit d) F) :=
‚Ñ± d

namespace final

variables (F : C ‚•§ D) [‚Ñ± : final F]
include ‚Ñ±

instance (d : D) : nonempty (comma (functor.from_punit d) F) := (‚Äπfinal F‚Ä∫ d).is_nonempty

variables {E : Type u} [category.{v} E] (G : D ‚•§ E)

def lift (d : D) : C :=
(classical.arbitrary (comma (functor.from_punit d) F)).right

def hom_to_lift (d : D) : d ‚ü∂ F.obj (lift F d) :=
(classical.arbitrary (comma (functor.from_punit d) F)).hom

def induction {d : D} (Z : Œ† (X : C) (k : d ‚ü∂ F.obj X), Sort*)
  (h‚ÇÅ : Œ† X‚ÇÅ X‚ÇÇ (k‚ÇÅ : d ‚ü∂ F.obj X‚ÇÅ) (k‚ÇÇ : d ‚ü∂ F.obj X‚ÇÇ) (f : X‚ÇÅ ‚ü∂ X‚ÇÇ), (k‚ÇÅ ‚â´ F.map f = k‚ÇÇ) ‚Üí Z X‚ÇÅ k‚ÇÅ ‚Üí Z X‚ÇÇ k‚ÇÇ)
  (h‚ÇÇ : Œ† X‚ÇÅ X‚ÇÇ (k‚ÇÅ : d ‚ü∂ F.obj X‚ÇÅ) (k‚ÇÇ : d ‚ü∂ F.obj X‚ÇÇ) (f : X‚ÇÅ ‚ü∂ X‚ÇÇ), (k‚ÇÅ ‚â´ F.map f = k‚ÇÇ) ‚Üí Z X‚ÇÇ k‚ÇÇ ‚Üí Z X‚ÇÅ k‚ÇÅ)
  {X‚ÇÄ : C} {k‚ÇÄ : d ‚ü∂ F.obj X‚ÇÄ} (z : Z X‚ÇÄ k‚ÇÄ) : Z (lift F d) (hom_to_lift F d) :=
begin
  apply @is_preconnected_induction _ _ _
    (Œª (Y : comma (functor.from_punit d) F), Z Y.right Y.hom) _ _ { right := X‚ÇÄ, hom := k‚ÇÄ, } z,
  { intros, fapply h‚ÇÅ _ _ _ _ f.right _ a, convert f.w.symm, dsimp, simp, },
  { intros, fapply h‚ÇÇ _ _ _ _ f.right _ a, convert f.w.symm, dsimp, simp, },
end

def induction' {Y : C} (Z : Œ† (X : C) (k : F.obj Y ‚ü∂ F.obj X), Sort*)
  (h‚ÇÅ : Œ† X‚ÇÅ X‚ÇÇ (k‚ÇÅ : F.obj Y ‚ü∂ F.obj X‚ÇÅ) (k‚ÇÇ : F.obj Y ‚ü∂ F.obj X‚ÇÇ) (f : X‚ÇÅ ‚ü∂ X‚ÇÇ), (k‚ÇÅ ‚â´ F.map f = k‚ÇÇ) ‚Üí Z X‚ÇÅ k‚ÇÅ ‚Üí Z X‚ÇÇ k‚ÇÇ)
  (h‚ÇÇ : Œ† X‚ÇÅ X‚ÇÇ (k‚ÇÅ : F.obj Y ‚ü∂ F.obj X‚ÇÅ) (k‚ÇÇ : F.obj Y ‚ü∂ F.obj X‚ÇÇ) (f : X‚ÇÅ ‚ü∂ X‚ÇÇ), (k‚ÇÅ ‚â´ F.map f = k‚ÇÇ) ‚Üí Z X‚ÇÇ k‚ÇÇ ‚Üí Z X‚ÇÅ k‚ÇÅ)
  (z : Z Y (ùüô _)) : Z (lift F (F.obj Y)) (hom_to_lift F (F.obj Y)) :=
induction F Z h‚ÇÅ h‚ÇÇ z

variables {F G}

@[simps]
def extend_cocone (c : cocone (F ‚ãô G)) : cocone G :=
{ X := c.X,
  Œπ :=
  { app := Œª X, G.map (hom_to_lift F X) ‚â´ c.Œπ.app (lift F X),
    naturality' := Œª X Y f,
    begin
      dsimp, simp,
      -- This would be true if we'd chosen `lift F X` to be `lift F Y`
      -- and `hom_to_lift F X` to be `f ‚â´ hom_to_lift F Y`.
      apply induction F (Œª Z k, G.map f ‚â´ G.map (hom_to_lift F Y) ‚â´ c.Œπ.app (lift F Y) = G.map k ‚â´ c.Œπ.app Z),
      { intros Z‚ÇÅ Z‚ÇÇ k‚ÇÅ k‚ÇÇ g a z,
       rw [‚Üêa, functor.map_comp, category.assoc, ‚Üêfunctor.comp_map, c.w, z], },
      { intros Z‚ÇÅ Z‚ÇÇ k‚ÇÅ k‚ÇÇ g a z,
       rw [‚Üêa, functor.map_comp, category.assoc, ‚Üêfunctor.comp_map, c.w] at z,
       rw z, },
      { rw [‚Üêfunctor.map_comp_assoc], },
    end }}

variables (F)

@[simp]
lemma colimit_cocone_comp_aux (s : cocone (F ‚ãô G)) (j : C) :
  G.map (hom_to_lift F (F.obj j)) ‚â´ s.Œπ.app (lift F (F.obj j)) =
    s.Œπ.app j :=
begin
  -- This point is that this would be true if we took `lift (F.obj j)` to just be `j`
  -- and `hom_to_lift (F.obj j)` to be `ùüô (F.obj j)`.
  apply induction' F (Œª X k, G.map k ‚â´ s.Œπ.app X = (s.Œπ.app j : _)),
  { intros j‚ÇÅ j‚ÇÇ k‚ÇÅ k‚ÇÇ f w h, rw ‚Üêw, rw ‚Üê s.w f at h, simpa using h, },
  { intros j‚ÇÅ j‚ÇÇ k‚ÇÅ k‚ÇÇ f w h, rw ‚Üêw at h, rw ‚Üê s.w f, simpa using h, },
  { simp, },
end

@[simps]
def colimit_cocone_comp (t : colimit_cocone G) :
  colimit_cocone (F ‚ãô G) :=
{ cocone := t.cocone.whisker F,
  is_colimit :=
  { desc := Œª s, t.is_colimit.desc (extend_cocone s),
    uniq' := Œª s m w,
    begin
      apply t.is_colimit.hom_ext,
      intro d,
      simp [(w _).symm],
    end, }, }.

@[priority 100]
instance comp_has_colimit [has_colimit G] :
  has_colimit (F ‚ãô G) :=
has_colimit.mk (colimit_cocone_comp F (get_colimit_cocone G))

lemma colimit_pre_is_iso_aux (t : colimit_cocone G) :
  (colimit_cocone_comp F t).is_colimit.desc (t.cocone.whisker F) = ùüô t.cocone.X :=
begin
  apply t.is_colimit.hom_ext,
  tidy,
end

instance colimit_pre_is_iso [has_colimit G] :
  is_iso (colimit.pre G F) :=
begin
  rw colimit.pre_eq (colimit_cocone_comp F (get_colimit_cocone G)) (get_colimit_cocone G),
  rw colimit_pre_is_iso_aux,
  dsimp,
  apply_instance,
end

def colimit_iso [has_colimit G] : colimit (F ‚ãô G) ‚âÖ colimit G := as_iso (colimit.pre G F)

@[simps]
def colimit_cocone_of_comp (t : colimit_cocone (F ‚ãô G)) :
  colimit_cocone G :=
{ cocone := extend_cocone t.cocone,
  is_colimit :=
  { desc := Œª s, t.is_colimit.desc (s.whisker F),
    uniq' := Œª s m w,
    begin
      apply t.is_colimit.hom_ext,
      intro X,
      simp [(w _).symm],
    end, }, }

@[priority 10]
instance has_colimit_of_comp [has_colimit (F ‚ãô G)] :
  has_colimit G :=
has_colimit.mk (colimit_cocone_of_comp F (get_colimit_cocone (F ‚ãô G)))

def colimit_iso' [has_colimit (F ‚ãô G)] : colimit (F ‚ãô G) ‚âÖ colimit G := as_iso (colimit.pre G F)

end final

end category_theory
